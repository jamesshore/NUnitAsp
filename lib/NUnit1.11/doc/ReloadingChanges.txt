Modified Classes:
ITestCollector. Renamed methods

TestSuite. Refactored constructors to elimiate duplicate code.
Modified checks for test methods. Now uses CLR method hiding
resolution instead of looping through parent classes and 
checking against a list of already processed method names.

ExpectExceptionTest.InvalidExceptionTests. Modified scope
of nested class to be public instead of protected to meet
test class validation rules

TestRunnerForm. Modifed to display details on 
SelectedIndexChanged instead of Clicked event. This allows
for keyboard navigation. Placed ProgressBar on designer, 
for design time layout. Changed anchors and docking to fix
resizing problems. Applied run button disabling rules to the
"Show Test Browser" menu item. Reparented "detailtextBox" to 
place it on the the tab control. Added splitter for detail
resizing. Added Top level menu shortcut.

ProgressBar. Changed paint code to dynamically acquire
brush. Modified paint event to paint only a single rectangle.

ShowTest. Remove unnescessary panel behind tree control.
Modified docking attributes to fix resizing and scroling
problems.

New Classes:
StandardLoader. Loads test classes from an assembly

NestedLoader. Loads nested test from a test instance by name.
Used in the ShowTests from. can be chained onto a StandardLoader.

UI Changes: Made UI classes sealed and internal. These classes 
have really not been designed w/reuse in mind, and I don't want
to run into problems later with other people having used them.

Added Data classes and events to transmit Test events over
AppDomain boundries.

ProxyTestRunner. A test runner that injects itself into another
AppDomain ensuring that only primitive and MBV types are passed 
back for display.


Obsolete:
ReflectionUtils. Refactored methods elsewhere, mostly to
AssemblyTestCollector

SimpleTestCollector. This class serves no use in .net. 
It's value in Java comes from the fact that java classse are
stored as files with the same name as the class.

ClassPathTestCollector. Java classpath has no corollary in.Net
The closest thing is the combination of Assembly.Load() and the
GAC instead of Assembly.LoadFrom(). These are handled by 
AssemblyTestCollector.

TestSuiteLoader & RelodingLoder. The design is again based around
the JVM's ability to do custom loading and unloading/reloading.
I don't see th evalue in trying to cary over this design.


General Changes:
Added many error checking for null arguments passed to functions.



Reloading Notes:
1. The only way to unload a type in CLR, is to load the type
in another AppDomain, then unload the AppDomain.
2. Type and Assembly marshal by value. If you return either
of these from a function across AppDomains, the assembly will
be loaded into the executing AppDomain, placing locks on the file,
that will not be removed when the temp AppDomain is unloaded.
3. Requiring ITest implementations to MBR may be too restrictive.
It may result in tests that run under text runner, but not gui.



Requested changes:
Convert IProtectable to a delegate. This would simplify implementation,
as it would elimiate the need for inner classes.

Convert ITestListner to delegates. Delegates are more flexible. Adding events
to this interface requires all implementer to add the events and we don't know
the consequences thereof. Versioning the interface requires users to implement
multiple collection of listners for whome to raise events. Delegates all events
to be added to the interface without affecting existing implementations, as long
as semantice dont change.

Add events for Test Suite starting and ending